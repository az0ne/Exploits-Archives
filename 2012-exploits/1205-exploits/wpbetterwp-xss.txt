-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Wordpress Security audit
better_wp_security

1. Cross-site scripting (reflected)

Summary

Severity:   	High
Confidence:   	Certain
Host:   	http://127.0.0.1
Path:   	/wp-admin/admin.php?page=better_wp_security

Issue detail

The value of the User-Agent HTTP header is copied into the HTML
document as plain text between tags. The payload
a7123<script>alert(1)</script>78089b4648b was submitted in the
User-Agent HTTP header. This input was echoed unmodified in the
application's response.

This proof-of-concept attack demonstrates that it is possible to
inject arbitrary JavaScript into the application's response.
Issue background Reflected cross-site scripting vulnerabilities arise
when data is copied from a request and echoed into the application's
immediate response in an unsafe way. An attacker can use the
vulnerability to construct a request which, if issued by another
application user, will cause JavaScript code supplied by the attacker
to execute within the user's browser in the context of that user's
session with the application.

The attacker-supplied code can perform a wide variety of actions, such
as stealing the victim's session token or login credentials,
performing arbitrary actions on the victim's behalf, and logging their
keystrokes.

Users can be induced to issue the attacker's crafted request in
various ways. For example, the attacker can send a victim a link
containing a malicious URL in an email or instant message. They can
submit the link to popular web sites that allow content authoring, for
example in blog comments. And they can create an innocuous looking web
site which causes anyone viewing it to make arbitrary cross-domain
requests to the vulnerable application (using either the GET or the
POST method).

The security impact of cross-site scripting vulnerabilities is
dependent upon the nature of the vulnerable application, the kinds of
data and functionality which it contains, and the other applications
which belong to the same domain and organisation. If the application
is used only to display non-sensitive public content, with no
authentication or access control functionality, then a cross-site
scripting flaw may be considered low risk. However, if the same
application resides on a domain which can access cookies for other
more security-critical applications, then the vulnerability could be
used to attack those other applications, and so may be considered high
risk. Similarly, if the organisation which owns the application is a
likely target for phishing attacks, then the vulnerability could be
leveraged to lend credibility to such attacks, by injecting Trojan
functionality into the vulnerable application, and exploiting users'
trust in the organisation in order to capture credentials for other
applications which it owns. In many kinds of application, such as
those providing online banking functionality, cross-site scripting
should always be considered high risk.
Issue remediation In most situations where user-controllable data is
copied into application responses, cross-site scripting attacks can be
prevented using two layers of defences:

Input should be validated as strictly as possible on arrival, given
the kind of content which it is expected to contain. For example,
personal names should consist of alphabetical and a small range of
typographical characters, and be relatively short; a year of birth
should consist of exactly four numerals; email addresses should match
a well-defined regular expression. Input which fails the validation
should be rejected, not sanitised.
User input should be HTML-encoded at any point where it is copied into
application responses. All HTML metacharacters, including < > " ' and
=, should be replaced with the corresponding HTML entities (&lt; &gt;
etc).

In cases where the application's functionality allows users to author
content using a restricted subset of HTML tags and attributes (for
example, blog comments which allow limited formatting and linking), it
is necessary to parse the supplied HTML to validate that it does not
use any dangerous syntax; this is a non-trivial task.

Request
GET /wp-admin/admin.php?page=better_wp_security HTTP/1.1
Host: 127.0.0.1
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:11.0)
Gecko/20100101 Firefox/11.0a7123<script>alert(1)</script>78089b4648b
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip, deflate
Proxy-Connection: keep-alive
Referer: http://127.0.0.1/wp-admin/options-general.php
Cookie:
wordpress_5c016e8f0f95f039102cbe8366c5c7f3=admin%7C1333587813%7C73fe3e4d525d2460588947c4b7a03114;
wp-settings-1=widgets_access%3Doff%26uploader%3D1;
wp-settings-time-1=1333368822; wordpress_test_cookie=WP+Cookie+check;
wordpress_logged_in_5c016e8f0f95f039102cbe8366c5c7f3=admin%7C1333587813%7C7b961d6e5caea2c784f282c5ed426964;
bb2_screener_=1333415711+127.0.0.1; PHPSESSID=j3l493obmauq7akebg8g3jb4k3


Response
HTTP/1.1 200 OK
Date: Tue, 03 Apr 2012 02:05:00 GMT
Server: Apache/2.2.20 (Ubuntu)
X-Powered-By: PHP/5.3.6-13ubuntu3.6
Expires: Wed, 11 Jan 1984 05:00:00 GMT
Last-Modified: Tue, 03 Apr 2012 02:05:00 GMT
Cache-Control: no-cache, must-revalidate, max-age=0
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
Vary: Accept-Encoding
Content-Length: 35849
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html>
<!--[if IE 8]>
<html xmlns="http://www.w3.org/1999/xhtml" class="ie8" dir="ltr"
lang="en-US">
<![endif]-->
<!--[if !(IE 8) ]><!-->
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr
...[SNIP]...
<strong>Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:11.0)
Gecko/20100101
Firefox/11.0a7123<script>alert(1)</script>78089b4648b</strong>
...[SNIP]...

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQIcBAEBAgAGBQJPrDiKAAoJEJPBwXYLR9Vt/hkQAKNGQhkWEzZA8t3+HmC6Japy
/YbUa+YEBjo9tBMU6fVVkmprl4kTAFUxXkecxHO7nac6OEtW5NqskZkikywn4x7n
/I5ZP+M8uns9pB0FXbhK9SR80BlRnvwcMGlJi7fqf83zi2A1NAbzhBUX48Ibk45C
jqT5OGBE7Ktg9MRL3GxfZeSvcmfooczhGipvHBFUOkv1sy/vlKOQJdqliAnWod1/
/gWY42dbkgDEI62ddVdF6s1BSoenMIbNFJSXpdSuz0DBm7soliKwxFmSK613o53O
BJ4+YQOCLeuQwnW7Jsf4v6u8XhgW+EBPkBk+jdR6Bg1DaDOICkyvWNu07xZpJWtP
ijFUovpl3PM3HgyEpoRJR2355TAoOLjkifxm2fO8FEp/TxuQdCT33Gr5UcuA6hnp
v7FZPcfDofYJm+EQgzIwdxv4NuC88EW1+WddO+t9MXTY/fi87oD3Aqgv+guXuyMp
J3kcwqzPKQXYlauQRq4V/RlUClrwCk9qDqa2ihan7Axl8XIfaP+ECyAasqAUl/Uh
OUZMxJNxzsKBv6BYlOOp4ipuVzBxO1KKOldJrTzV5VcwtQ5HZMoX+Lrv4BpCzxwB
1jL5SkuxP7zyJZrO6X/Comn41Wos/JFnXMvFWy1UyaEsQFC5NmkOsv5OEwKtiBQR
Jv/axPAeo7/88PR2ZrGY
=0weS
-----END PGP SIGNATURE-----
