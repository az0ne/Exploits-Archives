================================================

Vulnerability ID: HTB22452
Reference: http://www.htbridge.ch/advisory/xss_vulnerability_in_cruxpa_3.html
Product: CruxPA
Vendor: CruxSoftware
Vulnerable Version: 2.00 and Probably Prior Versions
Vendor Notification: 21 June 2010 
Vulnerability Type: XSS (Cross Site Scripting)
Status: Not Fixed, Vendor Alerted, Awaiting Vendor Response
Risk level: Medium 
Credit: High-Tech Bridge SA - Ethical Hacking & Penetration Testing (http://www.htbridge.ch/) 

Vulnerability Details:
User can execute arbitrary JavaScript code within the vulnerable application.

The vulnerability exists due to failure in the "/newappointment.php" script to properly sanitize user-supplied input in multiple variables. Successful exploitation of this vulnerability could result in a compromise of the application, theft of cookie-based authentication credentials, disclosure or modification of sensitive data.

An attacker can use browser to exploit this vulnerability. The following PoC is available:


1) Just add "<script>alert(document.cookie)</script>" value to all fileds in form.
2) Open this url: http://host/
3) Open this url: http://host/calendar.php?ID=$ID



================================================

Vulnerability ID: HTB22451
Reference: http://www.htbridge.ch/advisory/xss_vulnerability_in_cruxpa_2.html
Product: CruxPA
Vendor: CruxSoftware
Vulnerable Version: 2.00 and Probably Prior Versions
Vendor Notification: 21 June 2010 
Vulnerability Type: XSS (Cross Site Scripting)
Status: Not Fixed, Vendor Alerted, Awaiting Vendor Response
Risk level: Medium 
Credit: High-Tech Bridge SA - Ethical Hacking & Penetration Testing (http://www.htbridge.ch/) 

Vulnerability Details:
User can execute arbitrary JavaScript code within the vulnerable application.

The vulnerability exists due to failure in the "/newtelephone.php" script to properly sanitize user-supplied input in multiple variables. Successful exploitation of this vulnerability could result in a compromise of the application, theft of cookie-based authentication credentials, disclosure or modification of sensitive data.

An attacker can use browser to exploit this vulnerability. The following PoC is available:


1) Just add "<script>alert(document.cookie)</script>" value to all fileds in form.
2) Open this url: http://host/
3) Open this url: http://host/todo.php?ID=$ID


================================================

Vulnerability ID: HTB22450
Reference: http://www.htbridge.ch/advisory/xss_vulnerability_in_cruxpa_1.html
Product: CruxPA
Vendor: CruxSoftware
Vulnerable Version: 2.00 and Probably Prior Versions
Vendor Notification: 21 June 2010 
Vulnerability Type: XSS (Cross Site Scripting)
Status: Not Fixed, Vendor Alerted, Awaiting Vendor Response
Risk level: Medium 
Credit: High-Tech Bridge SA - Ethical Hacking & Penetration Testing (http://www.htbridge.ch/) 

Vulnerability Details:
User can execute arbitrary JavaScript code within the vulnerable application.

The vulnerability exists due to failure in the "/newtodo.php" script to properly sanitize user-supplied input in "todo" variable. Successful exploitation of this vulnerability could result in a compromise of the application, theft of cookie-based authentication credentials, disclosure or modification of sensitive data.

An attacker can use browser to exploit this vulnerability. The following PoC is available:


1) Just add "<script>alert(document.cookie)</script>" value to "Text" field.
2) Open this url: http://host/todo.php?ID=$ID


================================================

Vulnerability ID: HTB22449
Reference: http://www.htbridge.ch/advisory/xss_vulnerability_in_cruxpa.html
Product: CruxPA
Vendor: CruxSoftware
Vulnerable Version: 2.00 and Probably Prior Versions
Vendor Notification: 21 June 2010 
Vulnerability Type: XSS (Cross Site Scripting)
Status: Not Fixed, Vendor Alerted, Awaiting Vendor Response
Risk level: Medium 
Credit: High-Tech Bridge SA - Ethical Hacking & Penetration Testing (http://www.htbridge.ch/) 

Vulnerability Details:
User can execute arbitrary JavaScript code within the vulnerable application.

The vulnerability exists due to failure in the "/login.php" script to properly sanitize user-supplied input in "txtusername" POST parameter. Successful exploitation of this vulnerability could result in a compromise of the application, theft of cookie-based authentication credentials, disclosure or modification of sensitive data.

An attacker can use browser to exploit this vulnerability. The following PoC is available:


<form method="POST" action="http://host/login.php" name="main">
<input type=hidden name=txtusername value='"><script>alert(document.cookie)</script>'>
<input type=hidden name=txtpassword value=''>
<input type=hidden name=cmdSubmit value='Submit'>
</form>
<script>
document.main.submit();
</script>



